<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://1hitsong.github.io/</id><title>1hitsong</title><subtitle>I post stuff I'm interested in. That's it.</subtitle> <updated>2025-05-11T15:07:12-04:00</updated> <author> <name>1hitsong</name> <uri>https://1hitsong.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://1hitsong.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://1hitsong.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 1hitsong </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Case insensitive string comparison in BrightScript</title><link href="https://1hitsong.github.io/posts/brightscript-string-compare/" rel="alternate" type="text/html" title="Case insensitive string comparison in BrightScript" /><published>2025-05-11T13:05:00-04:00</published> <updated>2025-05-11T15:07:34-04:00</updated> <id>https://1hitsong.github.io/posts/brightscript-string-compare/</id> <content src="https://1hitsong.github.io/posts/brightscript-string-compare/" /> <author> <name>1hitsong</name> </author> <category term="programming" /> <summary> String comparisons in BrightScript are case sensitive. Since we programmers know you should never trust data is in the expected format, we need a simple method to compare two strings for equality. That’s why I created this helper function to compare two strings. The function checks to ensure the passed values are in an expected format then compares them using a forced case. First we use the i... </summary> </entry> <entry><title>Make a Roku channel Part 1 - Hello World</title><link href="https://1hitsong.github.io/posts/brightscript-hello-world/" rel="alternate" type="text/html" title="Make a Roku channel Part 1 - Hello World" /><published>2024-12-20T17:05:00-05:00</published> <updated>2024-12-20T17:04:37-05:00</updated> <id>https://1hitsong.github.io/posts/brightscript-hello-world/</id> <content src="https://1hitsong.github.io/posts/brightscript-hello-world/" /> <author> <name>1hitsong</name> </author> <category term="programming" /> <category term="learning" /> <summary> When learning a new programming language, there’s only one place to start. Let’s take a look at a Hello World channel! Folder Structure Unlike some programming languages, BrightScript expects some, but not all, files to be in specific folders. Below is an explanation of each folder in our Hello World channel. The .vscode folder contains files that are exclusive to the VSCode IDE. They are... </summary> </entry> <entry><title>Check if a nested chain of objects is valid</title><link href="https://1hitsong.github.io/posts/brightscript-check-chain-of-objects/" rel="alternate" type="text/html" title="Check if a nested chain of objects is valid" /><published>2024-12-12T17:00:00-05:00</published> <updated>2024-12-20T16:27:24-05:00</updated> <id>https://1hitsong.github.io/posts/brightscript-check-chain-of-objects/</id> <content src="https://1hitsong.github.io/posts/brightscript-check-chain-of-objects/" /> <author> <name>1hitsong</name> </author> <category term="programming" /> <summary> A core variable type in BrightScript is the associative array. These arrays allow objects to be accessed using keys. The access methods I’ve seen used most often are dots or brackets. Here’s an example using dots to access a deeply nested associative array. movie = { data: { overview: { slug: "Just When You Thought It Was Safe To Go Back In The Water" } } ... </summary> </entry> <entry><title>Check if many things are valid in BrightScript</title><link href="https://1hitsong.github.io/posts/brightscript-check-if-many-valid/" rel="alternate" type="text/html" title="Check if many things are valid in BrightScript" /><published>2024-12-11T17:30:00-05:00</published> <updated>2024-12-20T16:27:24-05:00</updated> <id>https://1hitsong.github.io/posts/brightscript-check-if-many-valid/</id> <content src="https://1hitsong.github.io/posts/brightscript-check-if-many-valid/" /> <author> <name>1hitsong</name> </author> <category term="programming" /> <summary> When programming BrightScript, there will certainly come a time when you will need to check if multiple variables are valid; or if you’re not using my isValid() helper function, if multiple variables are not invalid. In Roku’s documentation and sample code you may see this check written as: if variable1 &amp;lt;&amp;gt; invalid and variable2 &amp;lt;&amp;gt; invalid and variable3 &amp;lt;&amp;gt; invalid doSomet... </summary> </entry> <entry><title>A better way to check if something is valid in BrightScript</title><link href="https://1hitsong.github.io/posts/brightscript-check-if-valid/" rel="alternate" type="text/html" title="A better way to check if something is valid in BrightScript" /><published>2024-12-10T20:00:00-05:00</published> <updated>2024-12-10T20:00:00-05:00</updated> <id>https://1hitsong.github.io/posts/brightscript-check-if-valid/</id> <content src="https://1hitsong.github.io/posts/brightscript-check-if-valid/" /> <author> <name>1hitsong</name> </author> <category term="programming" /> <summary> If there is one thing I’ve learned from working in code for so long it’s that negative conditions in if statements can easily trip people up. That’s why when possible, I try to use positive conditions instead of negative conditions. Obviously, this doesn’t always make sense, but in BrightScript, there is one fundamental condition we can apply this code style to and it greatly improves code rea... </summary> </entry> </feed>
